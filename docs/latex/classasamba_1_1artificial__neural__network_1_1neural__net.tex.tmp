\hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net}{}\section{asamba.\+artificial\+\_\+neural\+\_\+network.\+neural\+\_\+net Class Reference}
\label{classasamba_1_1artificial__neural__network_1_1neural__net}\index{asamba.\+artificial\+\_\+neural\+\_\+network.\+neural\+\_\+net@{asamba.\+artificial\+\_\+neural\+\_\+network.\+neural\+\_\+net}}


\paragraph*{}

\subsection*{}

\subsection*{}

\subsection*{}

\subsection*{}

\subsection*{}

\subparagraph*{} 




Inheritance diagram for asamba.\+artificial\+\_\+neural\+\_\+network.\+neural\+\_\+net\+:
% FIG 0


Collaboration diagram for asamba.\+artificial\+\_\+neural\+\_\+network.\+neural\+\_\+net\+:
% FIG 1
\subsection*{Public Member Functions}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_ab35d35b79c522dd0f1e5bf88164e82f3}\label{classasamba_1_1artificial__neural__network_1_1neural__net_ab35d35b79c522dd0f1e5bf88164e82f3}} 
def {\bfseries \+\_\+\+\_\+init\+\_\+\+\_\+} (self)
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_afb2a64a48856eb07e4f48a3645d30843}\label{classasamba_1_1artificial__neural__network_1_1neural__net_afb2a64a48856eb07e4f48a3645d30843}} 
def \hyperlink{classasamba_1_1artificial__neural__network_1_1neural__net_afb2a64a48856eb07e4f48a3645d30843}{set} (self, attr, val)
\begin{DoxyCompactList}\small\item\em Setter. \end{DoxyCompactList}\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_ad916fe73e8028f451fadbdb0436da70e}\label{classasamba_1_1artificial__neural__network_1_1neural__net_ad916fe73e8028f451fadbdb0436da70e}} 
def \hyperlink{classasamba_1_1artificial__neural__network_1_1neural__net_ad916fe73e8028f451fadbdb0436da70e}{get} (self, attr)
\begin{DoxyCompactList}\small\item\em Getter. \end{DoxyCompactList}\item 
def \hyperlink{classasamba_1_1artificial__neural__network_1_1neural__net_a623b5424543944cb88d5a3a8889e6bbe}{solve\+\_\+normal\+\_\+equation} (self)
\begin{DoxyCompactList}\small\item\em Methods. \end{DoxyCompactList}\item 
def \hyperlink{classasamba_1_1artificial__neural__network_1_1neural__net_ac976779fd464470353ebe1f247314b8a}{chi\+\_\+square} (self)
\item 
def \hyperlink{classasamba_1_1artificial__neural__network_1_1neural__net_a333856c597f409a2ef20e07545baadf1}{max\+\_\+a\+\_\+posteriori} (self)
\item 
def \hyperlink{classasamba_1_1artificial__neural__network_1_1neural__net_a6c9272cb29ab3220ad19ffd3d35495a7}{marginalize\+\_\+wrt} (self, wrt)
\item 
def \hyperlink{classasamba_1_1artificial__neural__network_1_1neural__net_aa5832df25488526021198613fc2f6ce6}{marginalize} (self)
\end{DoxyCompactItemize}
\subsection*{Public Attributes}
\begin{DoxyCompactItemize}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_a4ab09b5b637dc7f53b8d59a93b6474e4}\label{classasamba_1_1artificial__neural__network_1_1neural__net_a4ab09b5b637dc7f53b8d59a93b6474e4}} 
{\bfseries normal\+\_\+equation\+\_\+done}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_acf888280ab4e318d98f30b198b8ead00}\label{classasamba_1_1artificial__neural__network_1_1neural__net_acf888280ab4e318d98f30b198b8ead00}} 
{\bfseries normal\+\_\+equation\+\_\+theta}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_adc2fd98d21454d4d84385cf081b6193e}\label{classasamba_1_1artificial__neural__network_1_1neural__net_adc2fd98d21454d4d84385cf081b6193e}} 
{\bfseries normal\+\_\+equation\+\_\+features}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_a57fa03f2b417cbfcc070544ae999a4fa}\label{classasamba_1_1artificial__neural__network_1_1neural__net_a57fa03f2b417cbfcc070544ae999a4fa}} 
{\bfseries normal\+\_\+equation\+\_\+cost}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_a99482343ab6e14f2b2299d06f9502c4b}\label{classasamba_1_1artificial__neural__network_1_1neural__net_a99482343ab6e14f2b2299d06f9502c4b}} 
{\bfseries M\+A\+P\+\_\+uniform\+\_\+prior}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_a73abc1d438d9caffe5fe1535add5013c}\label{classasamba_1_1artificial__neural__network_1_1neural__net_a73abc1d438d9caffe5fe1535add5013c}} 
{\bfseries M\+A\+P\+\_\+use\+\_\+log\+\_\+\+Teff\+\_\+log\+\_\+g\+\_\+prior}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_af486639662cc9a0a09eefa44e3bace5f}\label{classasamba_1_1artificial__neural__network_1_1neural__net_af486639662cc9a0a09eefa44e3bace5f}} 
{\bfseries M\+A\+P\+\_\+prior}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_a44e49b7e1b7c6d23d28e19f2fbabe67c}\label{classasamba_1_1artificial__neural__network_1_1neural__net_a44e49b7e1b7c6d23d28e19f2fbabe67c}} 
{\bfseries M\+A\+P\+\_\+ln\+\_\+prior}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_ae4b6ad0fb8f1539a45379805604bf091}\label{classasamba_1_1artificial__neural__network_1_1neural__net_ae4b6ad0fb8f1539a45379805604bf091}} 
{\bfseries chi\+\_\+square\+\_\+done}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_ac73fdf3dfb1500a70ccfa3a62d279f30}\label{classasamba_1_1artificial__neural__network_1_1neural__net_ac73fdf3dfb1500a70ccfa3a62d279f30}} 
{\bfseries frequency\+\_\+sigma\+\_\+factor}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_a9e249497ea1f7700c74ce4e53132ab89}\label{classasamba_1_1artificial__neural__network_1_1neural__net_a9e249497ea1f7700c74ce4e53132ab89}} 
{\bfseries M\+A\+P\+\_\+chi\+\_\+square\+\_\+matrix}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_a31d8ee3e87c6844d6dbabf13bdd917fe}\label{classasamba_1_1artificial__neural__network_1_1neural__net_a31d8ee3e87c6844d6dbabf13bdd917fe}} 
{\bfseries M\+A\+P\+\_\+chi\+\_\+square}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_ab2950ada903f70215bf38d38a5f34eb3}\label{classasamba_1_1artificial__neural__network_1_1neural__net_ab2950ada903f70215bf38d38a5f34eb3}} 
{\bfseries M\+A\+P\+\_\+likelihood}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_a41b9deec89d13536b875662528a72d69}\label{classasamba_1_1artificial__neural__network_1_1neural__net_a41b9deec89d13536b875662528a72d69}} 
{\bfseries M\+A\+P\+\_\+ln\+\_\+likelihood}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_afb36d0c0e233608eb9a4433eadbdd789}\label{classasamba_1_1artificial__neural__network_1_1neural__net_afb36d0c0e233608eb9a4433eadbdd789}} 
{\bfseries rescale\+\_\+ln\+\_\+likelihood}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_a10e72597954ac3c1bf07776f630bf2c2}\label{classasamba_1_1artificial__neural__network_1_1neural__net_a10e72597954ac3c1bf07776f630bf2c2}} 
{\bfseries M\+A\+P\+\_\+evidence}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_aaf8bff278ba4b75f89f288b3d91815d0}\label{classasamba_1_1artificial__neural__network_1_1neural__net_aaf8bff278ba4b75f89f288b3d91815d0}} 
{\bfseries M\+A\+P\+\_\+ln\+\_\+evidence}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_ab9d760e895c2e9819cdd8f6293aa057e}\label{classasamba_1_1artificial__neural__network_1_1neural__net_ab9d760e895c2e9819cdd8f6293aa057e}} 
{\bfseries M\+A\+P\+\_\+posterior}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_a5932ac64322c8efaa69c9d8295743344}\label{classasamba_1_1artificial__neural__network_1_1neural__net_a5932ac64322c8efaa69c9d8295743344}} 
{\bfseries M\+A\+P\+\_\+ln\+\_\+posterior}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_ad9528902cdfd730e5d825e6d3868affc}\label{classasamba_1_1artificial__neural__network_1_1neural__net_ad9528902cdfd730e5d825e6d3868affc}} 
{\bfseries M\+A\+P\+\_\+feature}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_af7f78c03187ed9359531a55b7a52008e}\label{classasamba_1_1artificial__neural__network_1_1neural__net_af7f78c03187ed9359531a55b7a52008e}} 
{\bfseries M\+A\+P\+\_\+frequencies}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_a3ae7716eb30c21b8b30aaaed771a5e3a}\label{classasamba_1_1artificial__neural__network_1_1neural__net_a3ae7716eb30c21b8b30aaaed771a5e3a}} 
{\bfseries M\+A\+P\+\_\+id\+\_\+track}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_a8969c4634111100eea1539b7b11ae31c}\label{classasamba_1_1artificial__neural__network_1_1neural__net_a8969c4634111100eea1539b7b11ae31c}} 
{\bfseries M\+A\+P\+\_\+id\+\_\+model}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_a0d9cacebc57b4f5f3011030f5d5aa721}\label{classasamba_1_1artificial__neural__network_1_1neural__net_a0d9cacebc57b4f5f3011030f5d5aa721}} 
{\bfseries M\+A\+P\+\_\+radial\+\_\+orders}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_a6fb72c4f6177f96d67bdaa9759b55a6a}\label{classasamba_1_1artificial__neural__network_1_1neural__net_a6fb72c4f6177f96d67bdaa9759b55a6a}} 
{\bfseries M\+A\+P\+\_\+mode\+\_\+types}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_a61c3c718b9655a5b3e91c0d2db796351}\label{classasamba_1_1artificial__neural__network_1_1neural__net_a61c3c718b9655a5b3e91c0d2db796351}} 
{\bfseries marginal\+\_\+results}
\item 
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_afc25832fb20e8fdb4064ec38f4d6de70}\label{classasamba_1_1artificial__neural__network_1_1neural__net_afc25832fb20e8fdb4064ec38f4d6de70}} 
{\bfseries marginal\+\_\+features}
\end{DoxyCompactItemize}


\subsection{Detailed Description}
\paragraph*{}

\subsection*{}

\subsection*{}

\subsection*{}

\subsection*{}

\subsection*{}

\subparagraph*{}

\begin{DoxyVerb}\end{DoxyVerb}
 

Definition at line 36 of file artificial\+\_\+neural\+\_\+network.\+py.



\subsection{Member Function Documentation}
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_ac976779fd464470353ebe1f247314b8a}\label{classasamba_1_1artificial__neural__network_1_1neural__net_ac976779fd464470353ebe1f247314b8a}} 
\index{asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net@{asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net}!chi\+\_\+square@{chi\+\_\+square}}
\index{chi\+\_\+square@{chi\+\_\+square}!asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net@{asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net}}
\subsubsection{\texorpdfstring{chi\+\_\+square()}{chi\_square()}}
{\footnotesize\ttfamily def asamba.\+artificial\+\_\+neural\+\_\+network.\+neural\+\_\+net.\+chi\+\_\+square (\begin{DoxyParamCaption}\item[{}]{self }\end{DoxyParamCaption})}

\begin{DoxyVerb}We define the \f$ \chi^2\f$ score between the i-th observed frequency \f$ f_i^{\rm (obs)}, and the model
frequency \f$ f_i^{\rm (mod)}\f$ (coming from e.g. the learning set) as the following

\f[ \chi^2 = \sum_{i=1}^{K} \chi^2_i = \sum_{i=1}^{K} \frac{1}{2}
         \left(\frac{f_i^{\rm (obs) - f_i^{\rm (mod)}{\sigma_i^2}\right)^2. 
\f]

Here, \f$ K\f$ is the total number of observed modes, and \f$\sigma_i\f$ is the 1-\f$\sigma\f$ uncertainty
around each observed frequency.

@param self: An instance of the neural_net() class
@type self: obj
@return: the "MAP_chi_square_matrix" and "MAP_chi_square" attributes of the class will be set
@rtype: None
\end{DoxyVerb}
 

Definition at line 194 of file artificial\+\_\+neural\+\_\+network.\+py.

Here is the call graph for this function\+:
% FIG 2
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_aa5832df25488526021198613fc2f6ce6}\label{classasamba_1_1artificial__neural__network_1_1neural__net_aa5832df25488526021198613fc2f6ce6}} 
\index{asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net@{asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net}!marginalize@{marginalize}}
\index{marginalize@{marginalize}!asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net@{asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net}}
\subsubsection{\texorpdfstring{marginalize()}{marginalize()}}
{\footnotesize\ttfamily def asamba.\+artificial\+\_\+neural\+\_\+network.\+neural\+\_\+net.\+marginalize (\begin{DoxyParamCaption}\item[{}]{self }\end{DoxyParamCaption})}

\begin{DoxyVerb}Iterate over all features in the learning set (whose names are stored in self.sampling.feature_names),
and marginalize with respect to each of these quantities. The outcome of the marginalization will be stored in
two attribute of the neural_net class:

1. marginal_results: which is a list of tuples; read the documentation of marginalize_wrt() method for more info.

2. marginal_features: which is basically cherrypicking of the most likely value from the marginal_features list.
   The order of the outputs here matches exactly that of sampling.features_names

The return structure of "self.marginal_results" is noteworthy. Because we iteratively call the
marginalize_wrt() method and collect its results (tuple with two ndarrays), the "self.marginal_results"
is a list of tuples.
\end{DoxyVerb}
 

Definition at line 266 of file artificial\+\_\+neural\+\_\+network.\+py.

Here is the call graph for this function\+:
% FIG 3
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_a6c9272cb29ab3220ad19ffd3d35495a7}\label{classasamba_1_1artificial__neural__network_1_1neural__net_a6c9272cb29ab3220ad19ffd3d35495a7}} 
\index{asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net@{asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net}!marginalize\+\_\+wrt@{marginalize\+\_\+wrt}}
\index{marginalize\+\_\+wrt@{marginalize\+\_\+wrt}!asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net@{asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net}}
\subsubsection{\texorpdfstring{marginalize\+\_\+wrt()}{marginalize\_wrt()}}
{\footnotesize\ttfamily def asamba.\+artificial\+\_\+neural\+\_\+network.\+neural\+\_\+net.\+marginalize\+\_\+wrt (\begin{DoxyParamCaption}\item[{}]{self,  }\item[{}]{wrt }\end{DoxyParamCaption})}

\begin{DoxyVerb}Marginalize the learning features (learning_x), with respect to (hence "wrt") one of the feature columns (whose names
are available as self.sampling.feature_names)

@param self: an instance of the neural_net() class
@type self: obj
@param wrt: marginalize with respect to
@type wrt: str
@return: a tuple with two members:
 - (ndarray) sorted array of the values of the attribute whose name was passed as wrt, e.g. 'logD'. Note that
   the values in this array are unique, and all repetitions are marginalized over
 - (ndarray) the marginalized posterior probability distribution associated with each of the values in the
   first element of the tuple
@rtype: tuple
\end{DoxyVerb}
 

Definition at line 247 of file artificial\+\_\+neural\+\_\+network.\+py.

Here is the caller graph for this function\+:
% FIG 4
\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_a333856c597f409a2ef20e07545baadf1}\label{classasamba_1_1artificial__neural__network_1_1neural__net_a333856c597f409a2ef20e07545baadf1}} 
\index{asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net@{asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net}!max\+\_\+a\+\_\+posteriori@{max\+\_\+a\+\_\+posteriori}}
\index{max\+\_\+a\+\_\+posteriori@{max\+\_\+a\+\_\+posteriori}!asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net@{asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net}}
\subsubsection{\texorpdfstring{max\+\_\+a\+\_\+posteriori()}{max\_a\_posteriori()}}
{\footnotesize\ttfamily def asamba.\+artificial\+\_\+neural\+\_\+network.\+neural\+\_\+net.\+max\+\_\+a\+\_\+posteriori (\begin{DoxyParamCaption}\item[{}]{self }\end{DoxyParamCaption})}

\begin{DoxyVerb}This routine finds the attributes of the model which maximizes the posterior likelihood function, hence MAP. 
It consists of the following steps:

1. Priors: Either set uniformly, or are set based on a comparison between log_Teff and log_g of the model and
   the star. For each hypothesis \f$h\f$, we return the prior information \f$P(h)\f$, and \f$\ln P(h)\f$.

2. LogLikelihood, or chi square \f$\chi^2\f$: the natural logarithm of the probability density of the data 
   given the hypothesis, i.e. 
   \f$\chi^2=\ln P(D|h) = \frac{1}{2K}\sum_{i=1}^{K} \left((f_i^{\rm (obs)} - f_i^{\rm (mod)})/sigma_i \right)^2 \f$.
   A recommended option here is to "rescale" the chi-square values to avoid numerical overflow.

3. Evidence, which is basically an inner dot product between the prior vector and the likelihood vector:
   \f$P(D)=\sum_h P(D\h) P(h) \f$. We return both \f$P(D)\f$ and \f$\ln P(D)\f$.

4. Posterior \f$P(h|D)\f$: Based on the Bayes Theorem, the posterior is 

   \f[
   \frac{P(h|D)}{s}=\frac{\frac{P(D|h)}{s}P(h)}{P(D)},
   \f]

   where \f$s\f$ is an optional "scaling" factor used to "rescale" the loglikelihood. Indeed, setting \f$s=1\f$
   recovers the Bayes theorem in its original form. This scaling is allowed, since we only make relative 
   comparison between the models.

@param self: an instance of the neural_net() class    
@type self: obj
\end{DoxyVerb}
 

Definition at line 215 of file artificial\+\_\+neural\+\_\+network.\+py.

\mbox{\Hypertarget{classasamba_1_1artificial__neural__network_1_1neural__net_a623b5424543944cb88d5a3a8889e6bbe}\label{classasamba_1_1artificial__neural__network_1_1neural__net_a623b5424543944cb88d5a3a8889e6bbe}} 
\index{asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net@{asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net}!solve\+\_\+normal\+\_\+equation@{solve\+\_\+normal\+\_\+equation}}
\index{solve\+\_\+normal\+\_\+equation@{solve\+\_\+normal\+\_\+equation}!asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net@{asamba\+::artificial\+\_\+neural\+\_\+network\+::neural\+\_\+net}}
\subsubsection{\texorpdfstring{solve\+\_\+normal\+\_\+equation()}{solve\_normal\_equation()}}
{\footnotesize\ttfamily def asamba.\+artificial\+\_\+neural\+\_\+network.\+neural\+\_\+net.\+solve\+\_\+normal\+\_\+equation (\begin{DoxyParamCaption}\item[{}]{self }\end{DoxyParamCaption})}



Methods. 

\begin{DoxyVerb}Find the analytic solution for the unknown hypothesis coefficients \f$\theta\f$, which minimizes the
cost function \f$ J(\theta) \f$ as defined below.

\f[ J(\theta)= \frac{1}{2m} (\theta^T X-y)^T \cdot (\theta^T X-y) \f]

For more information refer to: 
<a href="http://eli.thegreenplace.net/2014/derivation-of-the-normal-equation-for-linear-regression">Click to Open</a> 
Consequently, the analytic solution to \f$\theta\f$ is:

\f[ \theta_0 = (X^T \cdot X)^{-1} \cdot X^{-1} \cdot y. \f]

A brief remark on the dimensionality of the terms: For a learning set of size \f$ m\f$, with \f$ n+1\f$ features
(including the intercept coefficient), and for the observed/trained output \f$ y \f$ being a matrix of \f$ m\times K\f$
(for \f$ K\f$ modes), then the coefficient matrix \f$ \theta_0\f$ is \f$ (n+1) \times K \f$.

Once \f$\theta_0\f$ is analytically derived, then the cost function is minimized. If we assume
this set of coefficients make the cost function approach zero \f$J(\theta_0)\approx 0\f$, intuitively 
\f$ \theta_0^T\cdot X \approx y \f$. 

One can immediately solve for the unknown feature vector \f$ X \f$, which reproduces the observations \f$ y_0\f$, 
given the corresponding coefficients \f$ \theta_0 \f$. To that end, we multiply both sides of the last equation 
by \f$ \theta \f$, followed by a multiplication with \f$ (\theta_0 \cdot \theta_0^T)^{-1} \f$ to yield \f$ X \f$:

\f[ X_0 \approx (\theta_0 \cdot \theta_0^T)^{-1} \cdot (\theta \cdot y_0) \f]

Needless to highlight that \f$X_0\f$ is a vector of size \f$(n+1)\f$, for an intercept and \f n\f$ features.

Notes:
- The resulting coefficients are saved as the following attribute self.normal_equation_theta, and the resulting
  feature vector \f$ X_0 \f$ is stored as the attribute self.normal_equation_features.
- The model frequencies \f$ y \f$ and the observed frequencies \f$ y_0 \f$ are converted to the per day 
  (\f$ d^{-1} \f$) unit for a fair comparison.
- "A major drawback of the Maximum Likelihood approach is that it is vulnerable to overfitting, because no care
   is taken for cmplex models that try to learn the specificities of the particular training set (Theodoridis, S.
   2015, Machine Learning book)."

@param self: instance of the neural_net class
@type self: object
\end{DoxyVerb}
 

Definition at line 149 of file artificial\+\_\+neural\+\_\+network.\+py.

Here is the call graph for this function\+:
% FIG 5


The documentation for this class was generated from the following file\+:\begin{DoxyCompactItemize}
\item 
artificial\+\_\+neural\+\_\+network.\+py\end{DoxyCompactItemize}
